@model TechXpress_DepiGraduation.Data.ViewModel.OrderCheckoutViewModel
@{
ViewData["Title"] = "Checkout";
var cartItems = ViewBag.CartItems as List<TechXpress_DepiGraduation.Models.ShoppingCartItem>;
var total = ViewBag.Total as decimal? ?? 0;
var shippingCost = total >= 200 ? 0 : 10;
var grandTotal = total + shippingCost;
}

<div class="container py-5">
    <div class="row">
        <div class="col-lg-8">
            <!-- Address Section -->
            <div class="card mb-4" style="border-radius: 10px; border: none; box-shadow: 0 4px 12px rgba(123, 97, 255, 0.1);">
                <div class="card-header bg-white" style="border-radius: 10px 10px 0 0; border-bottom: 2px solid #7B61FF;">
                    <h4 class="mb-0" style="color: #7B61FF;">Shipping Address</h4>
                </div>
                <div class="card-body">
                    @if (Model.UserAddresses != null && Model.UserAddresses.Any())
                    {
                    <div class="address-options">
                        @foreach (var address in Model.UserAddresses)
                        {
                        <div class="form-check mb-3">
                            <input class="form-check-input" type="radio" name="selectedAddress" id="address-@address.Id"
                                   value="@address.Id" @(address == Model.UserAddresses.First() ? "checked" : "")>
                            <label class="form-check-label" for="address-@address.Id">
                                <div class="address-card p-3" style="border-radius: 8px; border: 1px solid #e0e0e0;">
                                    <h5>@address.AddressLine</h5>
                                    <p>@address.Street, @address.City</p>
                                    <p>@address.Country, @address.ZipCode</p>
                                </div>
                            </label>
                        </div>
                        }
                    </div>
                    }
                    else
                    {
                    <div class="alert alert-info">
                        Please add a shipping address to proceed with your order.
                    </div>
                    }

                    <button type="button" class="btn btn-outline-primary" style="color: #7B61FF; border-color: #7B61FF;"
                            data-bs-toggle="modal" data-bs-target="#addAddressModal">
                        <i class="bi bi-plus-circle"></i> Add New Address
                    </button>
                </div>
            </div>

            <!-- Payment Method Section -->
            <div class="card mb-4" style="border-radius: 10px; border: none; box-shadow: 0 4px 12px rgba(123, 97, 255, 0.1);">
                <div class="card-header bg-white" style="border-radius: 10px 10px 0 0; border-bottom: 2px solid #7B61FF;">
                    <h4 class="mb-0" style="color: #7B61FF;">Payment Method</h4>
                </div>
                <div class="card-body">
                    <div class="form-check mb-3">
                        <input class="form-check-input" type="radio" name="paymentMethod" id="cashOnDelivery"
                               value="CashOnDelivery" checked>
                        <label class="form-check-label" for="cashOnDelivery">
                            <i class="bi bi-cash-coin fs-4" style="color: #7B61FF;"></i> Cash on Delivery
                        </label>
                    </div>
                    <div class="form-check mb-3">
                        <input class="form-check-input" type="radio" name="paymentMethod" id="paypal"
                               value="PayPal">
                        <label class="form-check-label" for="paypal">
                            <i class="bi bi-paypal fs-4" style="color: #0070ba;"></i> PayPal
                        </label>
                    </div>
                    <div id="paypalBlock" class="mt-3" style="display: none;">
                        <label for="paypalEmail" class="form-label">PayPal Email</label>
                        <input type="email" class="form-control" id="paypalEmail" name="paypalEmail"
                               placeholder="Enter your PayPal email" required>
                        <span class="text-danger field-validation-error" id="paypalEmailError"></span>
                        <input type="hidden" id="payerId" name="payerId" />
                        <input type="hidden" id="paymentId" name="paymentId" />
                    </div>
                </div>
            </div>
        </div>

        <!-- Order Summary -->
        <div class="col-lg-4">
            <div class="card sticky-top" style="top: 20px; border-radius: 10px; border: none; box-shadow: 0 4px 12px rgba(123, 97, 255, 0.1);">
                <div class="card-header bg-white" style="border-radius: 10px 10px 0 0; border-bottom: 2px solid #7B61FF;">
                    <h4 class="mb-0" style="color: #7B61FF;">Order Summary</h4>
                </div>
                <div class="card-body">
                    @foreach (var item in cartItems)
                    {
                    <div class="d-flex justify-content-between mb-3">
                        <div>
                            <h6 class="mb-1">@item.Product.Name</h6>
                            <small class="text-muted">Qty: @item.Quantity</small>
                        </div>
                        <span>$@((item.Product.Price * item.Quantity).ToString("0.00"))</span>
                    </div>
                    }

                    <hr>
                    <div class="d-flex justify-content-between mb-2">
                        <span>Subtotal</span>
                        <span>$@total.ToString("0.00")</span>
                    </div>
                    <div class="d-flex justify-content-between mb-2">
                        <span>Shipping</span>
                        <span>
                            @if (shippingCost == 0)
                            {
                            <span class="text-success">Free Shipping</span>
                            }
                            else
                            {
                            <span>$@shippingCost.ToString("0.00")</span>
                            }
                        </span>
                    </div>
                    <div class="d-flex justify-content-between fw-bold">
                        <span>Total</span>
                        <span style="color: #7B61FF;">$@grandTotal.ToString("0.00")</span>
                    </div>
                    @if (total < 200)
                    {
                    <div class="alert alert-info mt-3">
                        <i class="bi bi-info-circle"></i> Spend $@((200 - total).ToString("0.00")) more to get free shipping!
                    </div>
                    }
                </div>
                <div class="card-footer bg-white" style="border-radius: 0 0 10px 10px;">
                    <button  id="placeOrderBtn" class="btn btn-primary w-100" style="background-color: #7B61FF; border: none;"
                            @(Model.UserAddresses == null || !Model.UserAddresses.Any() ? "disabled" : "")>
                        Place Order
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Address Modal -->
<div class="modal fade" id="addAddressModal" tabindex="-1" aria-labelledby="addAddressModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addAddressModalLabel" style="color: #7B61FF;">Add New Address</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addAddressForm" asp-action="AddAddress" asp-controller="Account" method="post">
                    @Html.AntiForgeryToken()
                    <div class="mb-3">
                        <label asp-for="NewAddress.Country" class="form-label">Country</label>
                        <input type="text" class="form-control" name="NewAddress.Country"
                               id="NewAddress_Country" placeholder="e.g., Egypt" required>
                        <span asp-validation-for="NewAddress.Country" class="text-danger"></span>
                    </div>
                    <div class="mb-3">
                        <label asp-for="NewAddress.City" class="form-label">City</label>
                        <input type="text" class="form-control" name="NewAddress.City"
                               id="NewAddress_City" placeholder="e.g., Cairo" required>
                        <span asp-validation-for="NewAddress.City" class="text-danger"></span>
                    </div>
                    <div class="mb-3">
                        <label asp-for="NewAddress.Street" class="form-label">Street</label>
                        <input type="text" class="form-control" name="NewAddress.Street"
                               id="NewAddress_Street" placeholder="e.g., Main Street" required>
                        <span asp-validation-for="NewAddress.Street" class="text-danger"></span>
                    </div>
                    <div class="mb-3">
                        <label asp-for="NewAddress.ZipCode" class="form-label">Zip Code</label>
                        <input type="text" class="form-control" name="NewAddress.ZipCode"
                               id="NewAddress_ZipCode" placeholder="e.g., 10001" required>
                        <span asp-validation-for="NewAddress.ZipCode" class="text-danger"></span>
                    </div>
                    <div class="mb-3">
                        <label asp-for="NewAddress.AddressLine" class="form-label">Address Line</label>
                        <input type="text" class="form-control" name="NewAddress.AddressLine"
                               id="NewAddress_AddressLine" placeholder="e.g., 123 Building - Main St. - Region" required>
                        <span asp-validation-for="NewAddress.AddressLine" class="text-danger"></span>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" style="background-color: #7B61FF; border: none;" id="saveAddressBtn">Save Address</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    function displayValidationErrors(errors) {
        $('.field-validation-error').text('');
        $('.is-invalid').removeClass('is-invalid');

        $.each(errors, function(key, messages) {
            var fieldName = key.replace('NewAddress.', '');
            var $input = $(`[name="NewAddress.${fieldName}"]`);
            var $errorSpan = $input.siblings('.field-validation-error');

            if ($errorSpan.length) {
                $input.addClass('is-invalid');
                $errorSpan.text(messages.join(', '));
            }
        });
    }

    function showMessage(icon, title, detail) {
        Swal.fire({
            icon: icon,
            title: title,
            html: detail ? `<small>${detail}</small>` : '',
            showConfirmButton: true
        });
    }

    $(document).ready(function() {
        // Toggle PayPal email input
        $('input[name="paymentMethod"]').change(function() {
            if ($('#paypal').is(':checked')) {
                $('#paypalBlock').show();
                $('#paypalEmail').prop('required', true);
            } else {
                $('#paypalBlock').hide();
                $('#paypalEmail').prop('required', false);
                $('#paypalEmailError').text('');
            }
        });

        // Clear validation errors when modal is shown
        $('#addAddressModal').on('show.bs.modal', function() {
            $('.field-validation-error').text('');
            $('.is-invalid').removeClass('is-invalid');
        });

        // Save address
        $('#saveAddressBtn').click(function() {
            var form = $('#addAddressForm');
            if (!form.valid()) {
                form.validate().focusInvalid();
                return;
            }

            var $btn = $(this);
            $btn.html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...');
            $btn.prop('disabled', true);

            $.ajax({
                url: form.attr('action'),
                type: 'POST',
                contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                data: form.serialize(),
                success: function(response) {
                    if (response.success) {
                        showMessage('success', 'Address Saved', 'Your address has been saved successfully!');
                        $('#addAddressModal').modal('hide');
                        location.reload();
                    } else {
                        displayValidationErrors(response.errors || {});
                        showMessage('error', response.message || 'Failed to save address');
                    }
                },
                error: function(xhr) {
                    var errorMsg = xhr.responseJSON?.message || 'An error occurred while saving the address';
                    showMessage('error', 'Error', errorMsg);
                },
                complete: function() {
                    $btn.html('Save Address');
                    $btn.prop('disabled', false);
                }
            });
        });

        // Place order
        $('#placeOrderBtn').click(function() {
            const selectedAddressId = $('input[name="selectedAddress"]:checked').val();
            const paymentMethod = $('input[name="paymentMethod"]:checked').val();
            const paypalEmail = $('#paypalEmail').val();
            if (!selectedAddressId) {
                showMessage('error', 'Error', 'Please select a shipping address');
                return;
            }


            @*  if (paymentMethod === 'PayPal' && (!paypalEmail || !paypalEmail.includes('@'))) {
                $('#paypalEmailError').text('Please enter a valid PayPal email');
                return;
            }
            *@

            var $btn = $(this);
            $btn.html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Processing...');
            $btn.prop('disabled', true);
            $.ajax({
                url: '@Url.Action("PlaceOrder", "Order")',
                type: 'POST',
                data: {
                    addressId: selectedAddressId,
                    paymentMethod: paymentMethod,
                    shippingCost: @shippingCost,
                    paypalEmail: paypalEmail
                },
                success: function(response) {
                    if (response.success) {
                        if (paymentMethod === 'PayPal') {
                            $.ajax({
                                url: response.redirectUrl,
                                type: 'POST',
                                data: {
                                    amount: @grandTotal,
                                    currency: 'USD',
                                    paypalEmail: paypalEmail
                                },
                                success: function(paypalResponse) {
                                    if (paypalResponse.success) {
                                        window.location.href = paypalResponse.approvalUrl;
                                    } else {
                                        showMessage('error', 'PayPal Error', paypalResponse.message);
                                        $btn.html('Place Order');
                                        $btn.prop('disabled', false);
                                    }
                                },
                                error: function(xhr) {
                                    showMessage('error', 'Error', xhr.responseJSON?.message || 'Failed to initiate PayPal payment');
                                    $btn.html('Place Order');
                                    $btn.prop('disabled', false);
                                }
                            });
                        } else {
                            showMessage('success', 'Order Placed', 'Your order has been placed successfully!');
                            setTimeout(() => {
                                window.location.href = response.redirectUrl;
                            }, 1500);
                        }
                    } else {
                        showMessage('error', 'Error', response.message);
                        $btn.html('Place Order');
                        $btn.prop('disabled', false);
                    }
                },
                error: function(xhr) {
                    showMessage('error', 'Error', xhr.responseJSON?.message || 'An error occurred while placing your order');
                    $btn.html('Place Order');
                    $btn.prop('disabled', false);
                }
            });
        });

        const urlParams = new URLSearchParams(window.location.search);
        const payerId = urlParams.get('PayerID');
        const paymentId = urlParams.get('paymentId');

        if (payerId && paymentId) {
            console.log("PayPal Redirect Detected");
            console.log("PayerID:", payerId);
            console.log("PaymentID:", paymentId);
            $('#payerId').val(payerId);
            $('#paymentId').val(paymentId);
            executePaypalPayment(payerId, paymentId);
        }

        function executePaypalPayment(payerId, paymentId) {
            $.ajax({
                url: '@Url.Action("ExecutePaypalPayment", "PayPal")',
                type: 'POST',
                data: {
                    payerId: payerId,
                    paymentId: paymentId
                },
                success: function(response) {
                    if (response.success) {
                        showMessage('success', 'Payment Successful', 'Your order has been placed successfully!');
                        setTimeout(() => {
                            window.location.href = '@Url.Action("OrderCompleted", "Order")';
                        }, 1500);
                    } else {
                        showMessage('error', 'Payment Failed', response.message);
                    }
                },
                error: function(xhr) {
                    showMessage('error', 'Error', xhr.responseJSON?.message || 'Failed to process PayPal payment');
                }
            });
        }

        // Enable place order button
        $('input[name="selectedAddress"]').change(function() {
            $('#placeOrderBtn').prop('disabled', false);
        });
    });
</script>
}